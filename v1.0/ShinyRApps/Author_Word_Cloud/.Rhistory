plot(res)
plot(res)
last.year.top.group
df.drugs2003.2013 <- orderBy(data = df.drugs2003.2012, ~ +year +rank)
headdf.drugs2003.201
head(df.drugs2003.201)
head(df.drugs2003.2013)
tail(df.drugs2003.2013)
url2003.2009 <- paste("http://www.drugs.com/top200_", 2003:2009, ".html", sep = "")
url2010      <- "http://www.drugs.com/top200.html"
url2011.2013 <- paste("http://www.drugs.com/stats/top100/", 2011:2013, "/sales", sep = "")
drugs2003.2010 <-
lapply(c(url2003.2009, url2010),
function(url) {
tab.imported <- readHTMLTable(url, header = FALSE, skip.rows = 1)[[2]][-201,1:4]
names(tab.imported) <- c("rank","name","company","sales")
tab.imported <- within(tab.imported, {
rank <- seq_along(rank)
sales <- as.numeric(gsub(",", "", sales)) * 1000
})
tab.imported
})
## Import 2011-2013 data (different format)
drugs2011.2013 <-
lapply(url2011.2013,
function(url) {
tab.imported <- readHTMLTable(url)[[2]][,1:3]
names(tab.imported) <- c("rank", "name", "sales")
tab.imported <- within(tab.imported, {
rank <- seq_along(rank)
sales <- as.numeric(gsub(",", "", sales)) * 1000
})
})
## Extract company names from drug.2003.2010 dataset
companies <- unlist(sapply(drugs2003.2010, "[", "company"))
names(companies) <- NULL
companies <- sort(unique(companies))
companies <- companies[!companies == ""]
companies
other.companies <- c("Otsuka Pharmaceutical Co.","Wyeth","Novo Nordisk, Inc.","Daiichi Sankyo","AbbVie, Inc.","Generic Drug", "Vertex Pharmaceuticals", "MedImmune, Inc", "Sunovion Pharmaceuticals Inc.")
replace.pattern <- paste(companies, other.companies, collapse = "|", sep = "|")
drugs2011.2013 <-
lapply(drugs2011.2013,
function(y) {
y$name <- gsub(replace.pattern, "", y$name)
y
})
save(list = c("drugs2003.2010","drugs2011.2013"), file = "~/drugs.com.2013.RData")
load(file = "~/drugs.com.2013.RData")
df.drugs2003.2010 <- do.call(rbind, drugs2003.2010)
df.drugs2011.2013 <- do.call(rbind, drugs2011.2013)
df.drugs2003.2010$year <- rep(2003:2010, rep(200, 8))
df.drugs2011.2013$year <- rep(2011:2013, rep(100, 3))
drug.company.table <- unique(df.drugs2003.2010[,c("name","company")])
df.drugs2011.2013 <-
merge(x = df.drugs2011.2013,
y = drug.company.table,
all.x = TRUE)
df.drugs2003.2013 <- rbind(df.drugs2003.2010[,c("year","rank","name","company","sales")],
df.drugs2011.2013
)
library(doBy)
df.drugs2003.2013 <- orderBy(data = df.drugs2003.2012, ~ +year +rank)
ever.in.top.group      <- subset(df.drugs2003.2013, rank %in% 1:10)$name
ever.in.top.group
data.ever.in.top.group <- subset(df.drugs2003.2013, name %in% ever.in.top.group)
data.ever.in.top.group[is.na(data.ever.in.top.group$sales), "sales"] <- 1
last.year.top.group <- subset(data.ever.in.top.group, year == 2013)
last.year.top.group
df.drugs2003.2013 <- orderBy(data = df.drugs2003.2013, ~ +year +rank)
ever.in.top.group <- subset(df.drugs2003.2013, rank %in% 1:10)$name
data.ever.in.top.group <- subset(df.drugs2003.2013, name %in% ever.in.top.group)
data.ever.in.top.group[is.na(data.ever.in.top.group$sales), "sales"] <- 1
last.year.top.group <- subset(data.ever.in.top.group, year == 2013)
last.year.top.group
tail(df.drugs2003.2013)
df.drugs2011.2013$year <- rep(2011:2013, rep(100, 3))
df.drugs2003.2010$year <- rep(2003:2010, rep(200, 8))
df.drugs2011.2013$year <- rep(2011:2013, rep(100, 3))
drug.company.table <- unique(df.drugs2003.2010[,c("name","company")])
df.drugs2011.2013 <-
merge(x = df.drugs2011.2013,
y = drug.company.table,
all.x = TRUE)
## All datasets combined as
df.drugs2003.2013 <- rbind(df.drugs2003.2010[,c("year","rank","name","company","sales")],
df.drugs2011.2013
)
tail(df.drugs2003.2013)
library(doBy)
df.drugs2003.2013 <- orderBy(data = df.drugs2003.2013, ~ +year +rank)
ever.in.top.group <- subset(df.drugs2003.2013, rank %in% 1:10)$name
data.ever.in.top.group <- subset(df.drugs2003.2013, name %in% ever.in.top.group)
data.ever.in.top.group[is.na(data.ever.in.top.group$sales), "sales"] <- 1
last.year.top.group <- subset(data.ever.in.top.group, year == 2013)
last.year.top.group
library(reshape2)
drug.table <- dcast(data = df.drugs2003.2013, rank ~ year, value.var = "name")[1:10,]
drug.table
data.ever.in.top.group$year <- as.Date(paste(sep = "", data.ever.in.top.group$year, "-01-01"))
data.ever.in.top.group
res <- gvisMotionChart(data.ever.in.top.group, idvar = "name", timevar = "year")
head(data.ever.in.top.group)
tail(data.ever.in.top.group)
tail(data.ever.in.top.group,10)
url2003.2009 <- paste("http://www.drugs.com/top200_", 2003:2009, ".html", sep = "")
url2010      <- "http://www.drugs.com/top200.html"
url2011.2013 <- paste("http://www.drugs.com/stats/top100/", 2011:2013, "/sales", sep = "")
library(XML)
drugs2003.2010 <-
lapply(c(url2003.2009, url2010),
function(url) {
tab.imported <- readHTMLTable(url, header = FALSE, skip.rows = 1)[[2]][-201,1:4]
names(tab.imported) <- c("rank","name","company","sales")
tab.imported <- within(tab.imported, {
rank <- seq_along(rank)
sales <- as.numeric(gsub(",", "", sales)) * 1000
})
tab.imported
})
## Import 2011-2013 data (different format)
drugs2011.2013 <-
lapply(url2011.2013,
function(url) {
tab.imported <- readHTMLTable(url)[[2]][,1:3]
names(tab.imported) <- c("rank", "name", "sales")
tab.imported <- within(tab.imported, {
rank <- seq_along(rank)
sales <- as.numeric(gsub(",", "", sales)) * 1000
})
})
companies <- unlist(sapply(drugs2003.2010, "[", "company"))
names(companies) <- NULL
companies <- sort(unique(companies))
companies <- companies[!companies == ""]
other.companies <- c("Otsuka Pharmaceutical Co.","Wyeth","Novo Nordisk, Inc.","Daiichi Sankyo","AbbVie, Inc.","Generic Drug", "Vertex Pharmaceuticals", "MedImmune, Inc", "Sunovion Pharmaceuticals Inc.")
replace.pattern <- paste(companies, other.companies, collapse = "|", sep = "|")
drugs2011.2013 <-
lapply(drugs2011.2013,
function(y) {
y$name <- gsub(replace.pattern, "", y$name)
y
})
save(list = c("drugs2003.2010","drugs2011.2013"), file = "~/drugs.com.2013.RData")
load(file = "~/drugs.com.2013.RData")
df.drugs2003.2010 <- do.call(rbind, drugs2003.2010)
df.drugs2011.2013 <- do.call(rbind, drugs2011.2013)
df.drugs2003.2010$year <- rep(2003:2010, rep(200, 8))
df.drugs2011.2013$year <- rep(2011:2013, rep(100, 3))
drug.company.table <- unique(df.drugs2003.2010[,c("name","company")])
df.drugs2011.2013 <-
merge(x = df.drugs2011.2013,
y = drug.company.table,
all.x = TRUE)
df.drugs2003.2013 <- rbind(df.drugs2003.2010[,c("year","rank","name","company","sales")],
df.drugs2011.2013
)
tail(df.drugs2003.2013)
library(doBy)
df.drugs2003.2013 <- orderBy(data = df.drugs2003.2013, ~ +year +rank)
tail(df.drugs2003.2013)
ever.in.top.group <- subset(df.drugs2003.2013, rank %in% 1:10)$name
data.ever.in.top.group <- subset(df.drugs2003.2013, name %in% ever.in.top.group)
data.ever.in.top.group[is.na(data.ever.in.top.group$sales), "sales"] <- 1
last.year.top.group <- subset(data.ever.in.top.group, year == 2013)
drug.table <- dcast(data = df.drugs2003.2013, rank ~ year, value.var = "name")[1:10,]
drug.table
data.ever.in.top.group$year <- as.Date(paste(sep = "", data.ever.in.top.group$year, "-01-01"))
library(googleVis)
res <- gvisMotionChart(data.ever.in.top.group, idvar = "name", timevar = "year")
plot(res)
res <- gvisMotionChart(data.ever.in.top.group, idvar = "name", timevar = "year",width = 500 , height = 500)
res <- gvisMotionChart(data.ever.in.top.group, idvar = "name", timevar = "year",options=list(width = 500 , height = 500))
plot(res)
res <- gvisMotionChart(data.ever.in.top.group, idvar = "name", timevar = "year",options=list(width = 800 , height = 500))
plot(res)
head(data.ever.in.top.group)
print(res, "chart")
sink("googlemotion.txt")
print(res, "chart")
unlink("googlemotion.txt")
getwd()
getwd()
setwd()
setwd("~")
res
print(res, "chart")
sink()
file.show("googlemotion.txt")
unlink("googlemotion.txt")
getwd()
res
cat(res,"googlemotion.txt")
write(res,"googlemotion.txt")
cat(res$html$chart,"googlemotion.html")
cat(res$html$chart,file="googlemotion.html")
jpeg(file="/Users/abhikseal/test1.png")
plot(x[1:2], main="First two columns plot", xlab=names(x)[1], ylab=names(x)[2]);
x<-iris
jpeg(file="/Users/abhikseal/test1.png")
plot(x[1:2], main="First two columns plot", xlab=names(x)[1], ylab=names(x)[2]);
dev.off();
png(file="/Users/abhikseal/test1.png")
plot(x[1:2], main="First two columns plot", xlab=names(x)[1], ylab=names(x)[2]);
dev.off();
png(file="/Users/abhikseal/test1.png")
plot(x[1:2], main="First two columns plot", xlab=names(x)[1], ylab=names(x)[2]);
dev.off();
library(mda)
data(iris)
fit <- mda(Species~., data=iris)
summary(fit)
predictions <- predict(fit, iris[,1:4])
table(predictions, iris$Species)
a<-table(predictions, iris$Species)
getwd()
write(a,"predictions.txt")
write.csv(a,"predictions.txt",)
write.csv(a,"predictions.txt",quote = FALSE)
library('mda')
head(irsi)
head(iris)
iris<-as.factor(iris$Species)
head(iris)
iris
data(iris)
iris
testiris<-iris
testiris$Species<-as.factor(testiris$Species)
head(testiris)
testiris$Species<-as.numeric(as.character(testiris$Species))
head(testiris)
testiris$Species<-as.numeric(iris$Species)
head(testiris)
write.csv(testiris,"testiris.csv")
a
data.frame(a)
a
library(ggplot2)
head(iris)
qplot(Sepal.Length,Sepal.Width,data=iris)
qplot(Sepal.Length,Sepal.Width,data=iris)
qplot(carat, price, data = diamonds)
data(diamonds)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds)
qplot(mpg, wt, data=mtcars)
qplot(mpg, wt, data=mtcars)
qplot(mpg, wt, data=mtcars, colour=cyl)
qplot(mpg, wt, data=mtcars, size=cyl)
qplot(mpg, wt, data=mtcars, facets=vs ~ am)
print(qplot(mpg, wt, data=mtcars, facets=vs ~ am))
ggplot(data=mtcars,aes(carat,price))
movies <- movies[sample(nrow(movies), 1000), ]
qplot(rating, data=movies, geom="histogram")
m <- ggplot(movies, aes(x=rating))
m + geom_histogram()
library(shiny)
setwd("~/Shiny_Health_Data-master")
runApp()
install.packages('weatherData')
library(weatherData)
d<-getWeatherForDate("SEA", "2014-05-05")
getWeatherForDate("SEA", "2014-05-05", opt_detailed=TRUE)
getWeatherForDate("SEA", "2014-011-01", opt_detailed=TRUE)
getWeatherForDate("SEA", "2014-01-011", opt_detailed=TRUE)
getWeatherForYear("MUMBAI", 2013)
getWeatherForYear("MUMBAI", 2014)
getWeatherForYear("KOLKATA", 2014)
d<-getWeatherForYear("KOLKATA", 2014)
head(d)
setwd("~/fda_faers/faers_ascii_2012q4/ascii")
patient <- read.table("demo12q4.txt", sep = "$", header = T, fill = T, quote = "")
drug <- read.table("drug12q4.txt", sep = "$", header = T, fill = T, quote = "")
reaction <- read.table("reac12q4.txt", sep = "$", header = T, fill = T, quote = "")
outcomes <- read.table("outc12q4.txt", sep = "$", header = T, fill = T, quote = "")
df <- drug[(grepl("Aspirin", drug$drugname, ignore.case = T) | # drug is likely to be entered as many different brand names, use this to capture them individually
grepl("Humira", drug$drugname, ignore.case = T) | # enter drug names here, add or remove grepl() as needed with "or" statements \
grepl("Gleevec", drug$drugname, ignore.case = T)) & drug$drug_seq == 1, ] # drug seq 1 == suspect drug of many possible that patient is taking
head(df)
df <- merge(df, reaction, by = "primaryid") # let's merge the drug file with reactions
df <- merge(df, outcomes, by = "primaryid") # we'll bring in outcomes, too
df2 <- as.data.frame(table(df$pt, df$outc_code)) # count the instances of reactions and their outcomes
names(df2) <- c("reaction", "outcome", "count")
df2 <- df2[order(df2$count, decreasing = T), ]
head(df2, 20)
dim(df2)
head(df)
dim(df)
tail(df)
df <- drug[(grepl("Aspirin", drug$drugname, ignore.case = T) | drug$drug_seq == 1, ]
df <- drug[(grepl("Aspirin", drug$drugname, ignore.case = T) & drug$drug_seq == 1, ]
df <- drug[(grepl("Aspirin", drug$drugname, ignore.case = T)) & drug$drug_seq == 1, ]
dim(df)
df <- merge(df, reaction, by = "primaryid") # let's merge the drug file with reactions
df <- merge(df, outcomes, by = "primaryid") # we'll bring in outcomes, too
head(df)
df2 <- as.data.frame(table(df$pt, df$outc_code)) # count the instances of reactions and their outcomes
names(df2) <- c("reaction", "outcome", "count")
df2 <- df2[order(df2$count, decreasing = T), ]
head(df2, 20)
dim(df2)
head(reaction)
head(outcomes)
head(drug)
head(patient)
head(df2)
head(df)
patient <- read.table("demo12q4.txt", sep = "$", header = T, fill = T, quote = "")
drug <- read.table("drug12q4.txt", sep = "$", header = T, fill = T, quote = "")
reaction <- read.table("reac12q4.txt", sep = "$", header = T, fill = T, quote = "")
outcomes <- read.table("outc12q4.txt", sep = "$", header = T, fill = T, quote = "")
df <- drug[(grepl("Aspirin", drug$drugname, ignore.case = T)) & drug$drug_seq == 1, ]
head(df)
df <- merge(df, reaction, by = "primaryid") # let's merge the drug file with reactions
head(df)
df <- merge(df, patient, by = "primaryid")
head(df)
dim(df)
setwd("~/github/chemical-similarity/results")
data<-read.csv("timingresults.csv",header=TRUE)
library(ggplot2)
df<-read.csv("timingresults.csv",header=TRUE)
head(df)
ggplot(data=df, aes(x=Thresholds , y=Mean , group=Number.of.compounds  , color=type)) + geom_line() +geom_point()
df<-read.csv("timingresults.csv",header=TRUE)
df<-read.csv("timingresults.csv",header=TRUE)
head(df)
ggplot(data=df, aes(x=Thresholds , y=Mean , group=Number.of.compounds  , color=type)) + geom_line() +geom_point()
df<-read.csv("timingresults.csv",header=TRUE)
ggplot(data=df, aes(x=Thresholds , y=Mean , group=Number.of.compounds  , color=type)) + geom_line() +geom_point()
ggplot(data=df, aes(x=Thresholds , y=Mean , group=type  , color=Number.of.compounds)) + geom_line() +geom_point()
ggplot(data=df, aes(x=Thresholds , y=Mean , group=type  , color=Number.of.compounds)) + geom_hist()
ggplot(data=df, aes(x=Thresholds , y=Mean , group=type  , color=Number.of.compounds)) + geom_bar()
ggplot(data=df, aes(x=Thresholds , y=Mean , group=type  , color=Number.of.compounds)) +
geom_bar(colour="black", stat="identity")
ggplot(data=df, aes(x=Thresholds , y=Mean , group=type  , fill=Number.of.compounds)) +
geom_bar(colour="black", stat="identity")
ggplot(data=df, aes(x=Thresholds , y=Mean , group=type  , fill=type)) +
geom_bar(colour="black", stat="identity")
ggplot(data=df, aes(x=Number.of.compounds , y=Mean , group=type  , fill=type)) +
geom_bar(colour="black", stat="identity")
ggplot(data=df, aes(x=Number.of.compounds , y=Mean, fill=type)) +
geom_bar(colour="black", stat="identity")
ggplot(data=df, aes(x=Thresholds , y=Mean, fill=type)) +
geom_bar(colour="black", stat="identity") + facet_wrap(~Number.of.compounds)
geom_bar(colour="black", stat="identity",position="dodge") + facet_wrap(~Number.of.compounds)
geom_bar(colour="black",position="dodge") + facet_wrap(~Number.of.compounds)
ggplot(data=df, aes(x=Thresholds , y=Mean, fill=type)) +
geom_bar(position="dodge") + facet_wrap(~Number.of.compounds)
ggplot(data=df, aes(x=Thresholds , y=Mean, fill=type)) +
geom_bar(colour="black",position="dodge") + facet_wrap(~Number.of.compounds)
ggplot(data=df, aes(x=Thresholds , y=Mean, group=type)) +
geom_line() + geom_point() + facet_wrap(~Number.of.compounds)
ggplot(data=df, aes(x=Thresholds , y=Mean, color=type)) +
geom_line() + geom_point() + facet_wrap(~Number.of.compounds)
ggplot(data=df, aes(x=Thresholds , y=Mean, color=type)) +
geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(x="Mean time in Milliseconds",y="Similarity Thresholds")+theme_bw()
ggplot(data=df, aes(x=Thresholds , y=Mean, color=type)) + ggtitle('Temperature')+
geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Mean time in Milliseconds",x="Similarity Thresholds")+theme_bw(legend.background = element_rect(colour = "black"))
ggplot(data=df, aes(x=Thresholds , y=Mean, color=type)) + ggtitle('Temperature')+
geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Mean time in Milliseconds",x="Similarity Thresholds")+theme_bw()
ggplot(data=df, aes(x=Thresholds , y=Mean, color=type)) + ggtitle('Timings of similarity Search using two fingerprints')+
geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Mean time in Milliseconds",x="Similarity Thresholds")+theme_bw()
ggplot(data=df, aes(x=Thresholds , y=Mean, color=type)) + ggtitle('Timings of similarity Search using two fingerprints')+
geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Mean time in Milliseconds",x="Similarity Thresholds")+theme_bw(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6))
ggplot(data=df, aes(x=Thresholds , y=Mean, color=type)) + ggtitle('Timings of similarity Search using two fingerprints')+
+ theme(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6))+geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Mean time in Milliseconds",x="Similarity Thresholds")+theme_bw()
ggplot(data=df, aes(x=Thresholds , y=Mean, color=type)) + ggtitle('Timings of similarity Search using two fingerprints')+
+ theme(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6))+geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Mean time in Milliseconds",x="Similarity Thresholds")+theme_bw()
ggplot(data=df, aes(x=Thresholds , y=Mean, color=type)) + ggtitle('Timings of similarity Search using two fingerprints')
+ geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Mean time in Milliseconds",x="Similarity Thresholds")+theme_bw()++ theme(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6))
ggplot(data=df, aes(x=Thresholds , y=Mean, color=type)) + ggtitle('Timings of similarity Search using two fingerprints')
+ geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Mean time in Milliseconds",x="Similarity Thresholds")+theme_bw()+theme(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6))
ggplot(data=df, aes(x=Thresholds , y=Mean, color=type)) + ggtitle('Timings of similarity Search using two fingerprints') +
geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Mean time in Milliseconds",x="Similarity Thresholds")+theme_bw()+
theme(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6))
ggplot(data=df, aes(x=Thresholds , y=Mean, color=type)) + ggtitle('Timings of similarity Search using two fingerprints') +
geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Mean time in Milliseconds",x="Similarity Thresholds")+theme_bw()+
theme(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6)) +
theme(axis.text.x = element_text(angle=90, face="bold", colour="black"))
ggplot(data=df, aes(x=Thresholds , y=Mean, color=type)) + ggtitle('Timings of similarity Search using two fingerprints') +
geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Mean time in Milliseconds",x="Similarity Thresholds")+theme_bw()+
theme(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6)) +
theme(axis.text.x = element_text(angle=90, face="bold", colour="black"))+
theme(axis.text.y = element_text(angle=90, face="bold", colour="black"))
ggplot(data=df, aes(x=Thresholds , y=Mean, color=type)) + ggtitle('Timings of similarity Search using two fingerprints') +
geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Mean time in Milliseconds",x="Similarity Thresholds")+theme_bw()+
theme(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6)) +
theme(axis.text.x = element_text(angle=90, face="bold", colour="black"))+
theme(axis.text.y = element_text(angle=90, face="bold", colour="black")) +
theme(axis.title.y = element_text(face="bold", size =15, colour="black")) +
theme(axis.title.x = element_text(face="bold", size =15, colour="black"))
ggplot(data=df, aes(x=Thresholds , y=Mean, color=type)) + ggtitle('Timings of similarity Search using two fingerprints') +
geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Mean time in Milliseconds",x="Similarity Thresholds")+theme_bw()+
theme(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6)) +
theme(axis.text.x = element_text(angle=90, face="bold", colour="black"))+
theme(axis.text.y = element_text(angle=90, face="bold", colour="black")) +
theme(axis.title.y = element_text(face="bold", size =15, colour="black")) +
theme(axis.title.x = element_text(face="bold", size =15, colour="black")) +
theme(legend.text = element_text(colour="black", size = 14, face = "bold"))
ggplot(data=df, aes(x=Thresholds , y=Median, color=type)) + ggtitle('Timings of similarity Search using two fingerprints') +
geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Median time in Milliseconds",x="Similarity Thresholds")+theme_bw()+
theme(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6)) +
theme(axis.text.x = element_text(angle=90, face="bold", colour="black"))+
theme(axis.text.y = element_text(angle=90, face="bold", colour="black")) +
theme(axis.title.y = element_text(face="bold", size =15, colour="black")) +
theme(axis.title.x = element_text(face="bold", size =15, colour="black")) +
theme(legend.text = element_text(colour="black", size = 14, face = "bold"))
ggplot(data=df, aes(x=Thresholds , y=Median, color=type)) + ggtitle('Median Timings of similarity Search using two fingerprints') +
geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Median time in Milliseconds",x="Similarity Thresholds")+theme_bw()+
theme(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6)) +
theme(axis.text.x = element_text(angle=90, face="bold", colour="black"))+
theme(axis.text.y = element_text(angle=90, face="bold", colour="black")) +
theme(axis.title.y = element_text(face="bold", size =15, colour="black")) +
theme(axis.title.x = element_text(face="bold", size =15, colour="black")) +
theme(legend.text = element_text(colour="black", size = 14, face = "bold"))
df<-read.csv("timingresults.csv",header=TRUE)
ggplot(data=df, aes(x=Thresholds , y=Mean.counts, color=type)) + ggtitle('Median Timings of similarity Search using two fingerprints') +
geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Mean Counts of compounds retrieved",x="Similarity Thresholds")+theme_bw()+
theme(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6)) +
theme(axis.text.x = element_text(angle=90, face="bold", colour="black"))+
theme(axis.text.y = element_text(angle=90, face="bold", colour="black")) +
theme(axis.title.y = element_text(face="bold", size =15, colour="black")) +
theme(axis.title.x = element_text(face="bold", size =15, colour="black")) +
theme(legend.text = element_text(colour="black", size = 14, face = "bold"))
ggplot(data=df, aes(x=Thresholds , y=log(Mean.counts), color=type)) + ggtitle('Median Timings of similarity Search using two fingerprints') +
geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Mean Counts of compounds retrieved",x="Similarity Thresholds")+theme_bw()+
theme(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6)) +
theme(axis.text.x = element_text(angle=90, face="bold", colour="black"))+
theme(axis.text.y = element_text(angle=90, face="bold", colour="black")) +
theme(axis.title.y = element_text(face="bold", size =15, colour="black")) +
theme(axis.title.x = element_text(face="bold", size =15, colour="black")) +
theme(legend.text = element_text(colour="black", size = 14, face = "bold"))
ggplot(data=df, aes(x=Thresholds , y=log(Mean.counts), color=type)) + ggtitle("Number of hits retrieved at different thresholds") +
labs(y="Log of Mean Counts of compounds retrieved",x="Similarity Thresholds")+theme_bw()+
theme(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6)) +
theme(axis.text.x = element_text(angle=90, face="bold", colour="black"))+
theme(axis.text.y = element_text(angle=90, face="bold", colour="black")) +
theme(axis.title.y = element_text(face="bold", size =15, colour="black")) +
theme(axis.title.x = element_text(face="bold", size =15, colour="black")) +
theme(legend.text = element_text(colour="black", size = 14, face = "bold"))
ggplot(data=df, aes(x=Thresholds , y=log(Mean.counts), color=type)) + ggtitle('Number of hits retrieved at different similarity thresholds') +
geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Log ofMean Counts of compounds retrieved",x="Similarity Thresholds")+theme_bw()+
theme(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6)) +
theme(axis.text.x = element_text(angle=90, face="bold", colour="black"))+
theme(axis.text.y = element_text(angle=90, face="bold", colour="black")) +
theme(axis.title.y = element_text(face="bold", size =15, colour="black")) +
theme(axis.title.x = element_text(face="bold", size =15, colour="black")) +
theme(legend.text = element_text(colour="black", size = 14, face = "bold"))
ggplot(data=df, aes(x=Thresholds , y=log(Mean.counts), color=type)) + ggtitle('Number of hits retrieved at different similarity thresholds') +
geom_line() + geom_point() + facet_wrap(~Number.of.compounds)+
labs(y="Log Mean Counts of compounds retrieved",x="Similarity Thresholds")+theme_bw()+
theme(plot.title = element_text(size=20, face="bold", vjust=1, lineheight=0.6)) +
theme(axis.text.x = element_text(angle=90, face="bold", colour="black"))+
theme(axis.text.y = element_text(angle=90, face="bold", colour="black")) +
theme(axis.title.y = element_text(face="bold", size =15, colour="black")) +
theme(axis.title.x = element_text(face="bold", size =15, colour="black")) +
theme(legend.text = element_text(colour="black", size = 14, face = "bold"))
iris
head(irsi)
head(iris)
head(iris[,2:])
head(iris[,2])
head(iris[,2:])
head(iris[,-1])
data(AquaticTox)
library(QSARdata)
data(AquaticTox)
head(AquaticTox_Outcome)
data<-AquaticTox_QuickProp
q.data<-cbind(data,AquaticTox_Outcome$Activity)
write.csv(q.data,"qsarset.csv")
getwd()
dim(q.data)
getwd()
setwd("~")
library(shinyapps)
setwd("~/github/dsdht/ShinyRApps/Author Word Cloud")
deployApp()
install.packages(shinyapps)
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
deployApp()
deployApp(appName="Author Cloud")
shinyapps::setAccountInfo(name='diabetescheck',
token='CB3C1197818E03A9805E81BF5AAF6DB9',
secret='k2oSFaB7g7Yx6bQs1Dboz162AUA5WhZY8s7jWs8q')
deployApp(appName="Author Cloud")
deployApp()
getwd()
deployApp(appName="Author Cloud")
deployApp()
